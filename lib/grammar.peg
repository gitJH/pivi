start
 = cmd:command ("#" .*)? { return cmd; }

command
  = ignore / primitive / property / canvas / newframe 
  / bracket / float / emptyline
// object:primitive  model:object ,  

ignore = "//" [^\n]* { return { type: "ignore"}}
 
keyframe = ":keyframe" ws ("\"" / "'") ws ident:([A-Z,a-z,0-9])+ ws ("\"" / "'") ws first:ufloat ws  { return  {type: "keyframe" , identity:ident.join("") , current_frame:first}; }
 
emptyline = ws { return {}; }

newframe = "newframe" { return  {type: "newframe"}; }

canvas = "canvas" ws width:float ws height:float { return {type: "initialize", width: width, height: height}; }

bracket
 = "[" { return { type: "push" }; } / "]" { return { type: "pop" }; }

primitive = points / line_types / circles

property = "set" ws property:(pointSize / color / lineWidth) { property.isProperty = true; return property; }

line_types = line / polyline
// draw separated lines ws ?  ws ? , extention: (typeof temp === 'undefined') ? {type: "undefined"} : temp
line = ( ("line" wsc) / "lines" ) pts:(tupel)* ws exten:keyframe ? ws { return { type: "lines", data: pts, extention: (typeof exten === 'undefined') ? {type: exten.type} : exten }; }
// draw multiple connected lines
polyline = "polyline" pts:(tupel)* ws exten:keyframe ? ws  { return { type: "polyline", data : pts , extention: (typeof exten === 'undefined') ? {type: exten.type} : exten }; }

points
  = ( ("point" wsc) / "points" ) pts:(tupel)* ws exten:keyframe ? ws { return { type: "points", data: pts , extention: (typeof exten === 'undefined') ? {type: exten.type} : exten }; }

circles = "circle" cs:(circle)* ws exten:keyframe ? ws { return { type: "circles", data: cs , extention: (typeof exten === 'undefined') ? {type: exten.type} : exten }; }
circle = pos:tupel r:ufloat ws { return [pos,r]; }

pointSize = "pointSize" ws size:ufloat ws exten:keyframe ? ws { return { type: "pointSize", isProperty:true, data: size , extention: (typeof exten === 'undefined') ? {type: exten.type} : exten }; }
lineWidth = "lineWidth" ws size:ufloat ws exten:keyframe ? ws { return { type: "lineWidth", isProperty:true, data: [size] , extention: (typeof exten === 'undefined') ? {type: exten.type} : exten }; }
color = "color" ws color:colorType ws exten:keyframe ? ws { return { type: "color", isProperty:true, data: [color] , extention: (typeof exten === 'undefined') ? {type: exten.type} : exten }; }

tupel
 = ws first:float ws second:float ws { return {x: first, y: second }; }

colorType = color:(rgb / hexColor / name) { return color; }
//colorType = color:name { return color; }

rgb = "rgb" rgbColor:utupel3 { return rgbColor; }
hexColor = "#" hexColor:([0-9,A-F,a-f]+) { return "#" + hexColor.join(""); }
name = nameColor:([A-Z,a-z])+ { return nameColor.join(""); }

utupel3
 = ws first:ufloat ws second:ufloat ws third:ufloat ws { return {x: first, y: second, z: third }; }

ws = wsc*
wsc = ( "(" / " " / ")" / "," / [\t] )

float
  = num:$("-"? digits ( "." digits )? ( "e" digits)?) { return parseFloat(num); }

// unsigned float for color, pointSize etc.
ufloat
  = num:$(digits ( "." digits )? ( "e" digits)?) { return parseFloat(num); }

digits = [0-9]+

